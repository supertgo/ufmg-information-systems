1) O progrma parece executar corretamente o que foi designado para fazer, aparenta estar apenas com leak de memória.

2) O valgrind confirma a hipótese, a memória do malloc não é limpada.
==81001== Memcheck, a memory error detector
==81001== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
==81001== Using Valgrind-3.21.0 and LibVEX; rerun with -h for copyright info
==81001== Command: ./c5
==81001== 
intArray[694]: 694
==81001== 
==81001== HEAP SUMMARY:
==81001==     in use at exit: 4,000 bytes in 1 blocks
==81001==   total heap usage: 2 allocs, 1 frees, 5,024 bytes allocated
==81001== 
==81001== 4,000 bytes in 1 blocks are definitely lost in loss record 1 of 1
==81001==    at 0x483C815: malloc (vg_replace_malloc.c:431)
==81001==    by 0x1091E7: main (c5.c:9)
==81001== 
==81001== LEAK SUMMARY:
==81001==    definitely lost: 4,000 bytes in 1 blocks
==81001==    indirectly lost: 0 bytes in 0 blocks
==81001==      possibly lost: 0 bytes in 0 blocks
==81001==    still reachable: 0 bytes in 0 blocks
==81001==         suppressed: 0 bytes in 0 blocks
==81001== 
==81001== For lists of detected and suppressed errors, rerun with: -s
==81001== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

3) Colocando o free no array, temos o seguinte relatório na etapa 4.

4)
==81223== Memcheck, a memory error detector
==81223== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
==81223== Using Valgrind-3.21.0 and LibVEX; rerun with -h for copyright info
==81223== Command: ./c5correto
==81223== 
intArray[148]: 148
==81223== 
==81223== HEAP SUMMARY:
==81223==     in use at exit: 0 bytes in 0 blocks
==81223==   total heap usage: 2 allocs, 2 frees, 5,024 bytes allocated
==81223== 
==81223== All heap blocks were freed -- no leaks are possible
==81223== 
==81223== For lists of detected and suppressed errors, rerun with: -s
==81223== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

