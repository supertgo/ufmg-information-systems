1) O código copia as informações do source para destination mas a última casa do array não é copiada pois não
foi alocado o mesmo espaçõ para ambos.

2) O valigrind acusa que houve uma leitura de tamanho 1 na função main, confirmando a hipótese.
==85507== Memcheck, a memory error detector
==85507== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
==85507== Using Valgrind-3.21.0 and LibVEX; rerun with -h for copyright info
==85507== Command: ./c8
==85507== 
==85507== Invalid read of size 1
==85507==    at 0x1091D2: main (c8.c:9)
==85507==  Address 0x4a5d0ba is 0 bytes after a block of size 26 alloc'd
==85507==    at 0x483C815: malloc (vg_replace_malloc.c:431)
==85507==    by 0x1091B1: main (c8.c:6)
==85507== 
==85507== 
==85507== HEAP SUMMARY:
==85507==     in use at exit: 0 bytes in 0 blocks
==85507==   total heap usage: 2 allocs, 2 frees, 53 bytes allocated
==85507== 
==85507== All heap blocks were freed -- no leaks are possible
==85507== 
==85507== For lists of detected and suppressed errors, rerun with: -s

3) Ao incrementar um número no malloc, ficando agora 27, o nenhum erro é mostrado
char* source = calloc(27, sizeof(char));

4) Nenhum erro é apontado pelas ferramentas após a correção.
==85432== Memcheck, a memory error detector
==85432== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
==85432== Using Valgrind-3.21.0 and LibVEX; rerun with -h for copyright info
==85432== Command: ./c7correto
==85432== 
==85432== 
==85432== HEAP SUMMARY:
==85432==     in use at exit: 0 bytes in 0 blocks
==85432==   total heap usage: 1 allocs, 1 frees, 27 bytes allocated
==85432== 
==85432== All heap blocks were freed -- no leaks are possible
==85432== 
==85432== For lists of detected and suppressed errors, rerun with: -s

