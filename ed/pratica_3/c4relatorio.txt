1) O programa parece tentar criar uma matriz 4x4 e depois tenta limpar cada elemento da matrix.
Existe um ponteiro de char sendo executado no free mas ele não foi nem inicializado e n
ao será utilizado no programa.

2) O valgrind está dizendo que houve usagem sem incialização na linha 12 da main de tamanho 8, 
a outra stack também diz que não foi possível escrever algo de tamanho 4 pois não foi alocado na memória.
==77417== Memcheck, a memory error detector
==77417== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
==77417== Using Valgrind-3.21.0 and LibVEX; rerun with -h for copyright info
==77417== Command: ./c4
==77417== 
==77417== Use of uninitialised value of size 8
==77417==    at 0x10917A: main (c4.c:12)
==77417== 
==77417== Invalid write of size 4
==77417==    at 0x10917A: main (c4.c:12)
==77417==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==77417== 
==77417== 
==77417== Process terminating with default action of signal 11 (SIGSEGV)
==77417==  Access not within mapped region at address 0x0
==77417==    at 0x10917A: main (c4.c:12)
==77417==  If you believe this happened as a result of a stack
==77417==  overflow in your program's main thread (unlikely but
==77417==  possible), you can try to increase the size of the
==77417==  main thread stack using the --main-stacksize= flag.
==77417==  The main thread stack size used in this run was 8388608.
==77417== 
==77417== HEAP SUMMARY:
==77417==     in use at exit: 0 bytes in 0 blocks
==77417==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated
==77417== 
==77417== All heap blocks were freed -- no leaks are possible
==77417== 
==77417== Use --track-origins=yes to see where uninitialised values come from
==77417== For lists of detected and suppressed errors, rerun with: -s
==77417== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

3) Após descomentar e remover a variavel desncessária com o free, o código não apresentou mais nenhum erro.

4)
==80926== Memcheck, a memory error detector
==80926== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
==80926== Using Valgrind-3.21.0 and LibVEX; rerun with -h for copyright info
==80926== Command: ./c4correto
==80926== 
==80926== 
==80926== HEAP SUMMARY:
==80926==     in use at exit: 0 bytes in 0 blocks
==80926==   total heap usage: 6 allocs, 6 frees, 112 bytes allocated
==80926== 
==80926== All heap blocks were freed -- no leaks are possible
==80926== 
==80926== For lists of detected and suppressed errors, rerun with: -s
==80926== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

