1) O fatorial está sendo calculado de maneira errada e a variável fact não é inicializada corretamente.


2) As iterações do for alertam que o bloco de dentro pode depender de variáveis não inicializadas.
==63766== Conditional jump or move depends on uninitialised value(s)
==63766==    at 0x48DF958: __vfprintf_internal (vfprintf-internal.c:1687)
==63766==    by 0x48C9D3E: printf (printf.c:33)
==63766==    by 0x109204: main (c14.c:12)
==63766== 
==63766== Use of uninitialised value of size 8
==63766==    at 0x48C369B: _itoa_word (_itoa.c:179)
==63766==    by 0x48DF574: __vfprintf_internal (vfprintf-internal.c:1687)
==63766==    by 0x48C9D3E: printf (printf.c:33)
==63766==    by 0x109204: main (c14.c:12)
==63766== 
==63766== Conditional jump or move depends on uninitialised value(s)
==63766==    at 0x48C36AD: _itoa_word (_itoa.c:179)
==63766==    by 0x48DF574: __vfprintf_internal (vfprintf-internal.c:1687)
==63766==    by 0x48C9D3E: printf (printf.c:33)
==63766==    by 0x109204: main (c14.c:12)
==63766== 
==63766== Conditional jump or move depends on uninitialised value(s)
==63766==    at 0x48E0228: __vfprintf_internal (vfprintf-internal.c:1687)
==63766==    by 0x48C9D3E: printf (printf.c:33)
==63766==    by 0x109204: main (c14.c:12)
==63766== 
==63766== Conditional jump or move depends on uninitialised value(s)
==63766==    at 0x48DF6EE: __vfprintf_internal (vfprintf-internal.c:1687)
==63766==    by 0x48C9D3E: printf (printf.c:33)
==63766==    by 0x109204: main (c14.c:12)
==63766== 
Factorial 5 = 3720
==63766== 
==63766== HEAP SUMMARY:
==63766==     in use at exit: 0 bytes in 0 blocks
==63766==   total heap usage: 2 allocs, 2 frees, 2,048 bytes allocated
==63766== 
==63766== All heap blocks were freed -- no leaks are possible
==63766== 
==63766== Use --track-origins=yes to see where uninitialised values come from
==63766== For lists of detected and suppressed errors, rerun with: -s
==63766== ERROR SUMMARY: 11 errors from 5 contexts (suppressed: 0 from 0)

3) Para corrigir o erro é necessário decrementar um valor do for ou fazer < n e inicializar o fact com n; 

4) Sem leaks após a mudança:
==63810== Memcheck, a memory error detector
==63810== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
==63810== Using Valgrind-3.21.0 and LibVEX; rerun with -h for copyright info
==63810== Command: ./c14correto
==63810== 
Positive integer:5
Factorial 5 = 120
==63810== 
==63810== HEAP SUMMARY:
==63810==     in use at exit: 0 bytes in 0 blocks
==63810==   total heap usage: 2 allocs, 2 frees, 2,048 bytes allocated
==63810== 
==63810== All heap blocks were freed -- no leaks are possible
==63810== 
==63810== For lists of detected and suppressed errors, rerun with: -s
==63810== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)


