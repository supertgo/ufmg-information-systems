1) O programa aloca 8 bytes para a variável msg, porém, a função strcpy passa uma string de 9 bytes para a 
variável. Além disso, a variável é alocada sem o free() no final.


2) O valgrind acusa que houve algumas escritas inválidas.
12679, Rolberton
==12680== Memcheck, a memory error detector
==12680== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
==12680== Using Valgrind-3.21.0 and LibVEX; rerun with -h for copyright info
==12680== Command: ./c11
==12680== 
==12680== Invalid write of size 2
==12680==    at 0x1091B4: main (c11.c:8)
==12680==  Address 0x4a5d048 is 0 bytes after a block of size 8 alloc'd
==12680==    at 0x483C815: malloc (vg_replace_malloc.c:431)
==12680==    by 0x10919E: main (c11.c:7)
==12680== 
==12680== Invalid read of size 1
==12680==    at 0x4842D14: __strlen_sse2 (vg_replace_strmem.c:503)
==12680==    by 0x48E0D14: __vfprintf_internal (vfprintf-internal.c:1688)
==12680==    by 0x48C9D3E: printf (printf.c:33)
==12680==    by 0x1091DF: main (c11.c:10)
==12680==  Address 0x4a5d048 is 0 bytes after a block of size 8 alloc'd
==12680==    at 0x483C815: malloc (vg_replace_malloc.c:431)
==12680==    by 0x10919E: main (c11.c:7)
==12680== 
==12680== Invalid read of size 1
==12680==    at 0x48F770C: _IO_new_file_xsputn (fileops.c:1219)
==12680==    by 0x48F770C: _IO_file_xsputn@@GLIBC_2.2.5 (fileops.c:1197)
==12680==    by 0x48DF0FB: __vfprintf_internal (vfprintf-internal.c:1688)
==12680==    by 0x48C9D3E: printf (printf.c:33)
==12680==    by 0x1091DF: main (c11.c:10)
==12680==  Address 0x4a5d048 is 0 bytes after a block of size 8 alloc'd
==12680==    at 0x483C815: malloc (vg_replace_malloc.c:431)
==12680==    by 0x10919E: main (c11.c:7)
==12680== 
==12680== Invalid read of size 1
==12680==    at 0x4847990: mempcpy (vg_replace_strmem.c:1686)
==12680==    by 0x48F7631: _IO_new_file_xsputn (fileops.c:1236)
==12680==    by 0x48F7631: _IO_file_xsputn@@GLIBC_2.2.5 (fileops.c:1197)
==12680==    by 0x48DF0FB: __vfprintf_internal (vfprintf-internal.c:1688)
==12680==    by 0x48C9D3E: printf (printf.c:33)
==12680==    by 0x1091DF: main (c11.c:10)
==12680==  Address 0x4a5d048 is 0 bytes after a block of size 8 alloc'd
==12680==    at 0x483C815: malloc (vg_replace_malloc.c:431)
==12680==    by 0x10919E: main (c11.c:7)
==12680== 
12680, Rolberton
==12680== 
==12680== HEAP SUMMARY:
==12680==     in use at exit: 8 bytes in 1 blocks
==12680==   total heap usage: 2 allocs, 1 frees, 1,032 bytes allocated
==12680== 
==12680== 8 bytes in 1 blocks are definitely lost in loss record 1 of 1
==12680==    at 0x483C815: malloc (vg_replace_malloc.c:431)
==12680==    by 0x10919E: main (c11.c:7)
==12680== 
==12680== LEAK SUMMARY:
==12680==    definitely lost: 8 bytes in 1 blocks
==12680==    indirectly lost: 0 bytes in 0 blocks
==12680==      possibly lost: 0 bytes in 0 blocks
==12680==    still reachable: 0 bytes in 0 blocks
==12680==         suppressed: 0 bytes in 0 blocks
==12680== 
==12680== For lists of detected and suppressed errors, rerun with: -s
==12680== ERROR SUMMARY: 7 errors from 5 contexts (suppressed: 0 from 0)

3) Para corrigir o erro é preciso incrementar mais 2 números para o malloc, um para o tamanho
palavra, que tem 9 caracteres e mais um para o '/0'.


4)
==63040== Memcheck, a memory error detector
==63040== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
==63040== Using Valgrind-3.21.0 and LibVEX; rerun with -h for copyright info
==63040== Command: ./c11correto
==63040== 
63040, Rolberton
==63040== 
==63040== HEAP SUMMARY:
==63040==     in use at exit: 0 bytes in 0 blocks
==63040==   total heap usage: 2 allocs, 2 frees, 1,034 bytes allocated
==63040== 
==63040== All heap blocks were freed -- no leaks are possible
==63040== 
==63040== For lists of detected and suppressed errors, rerun with: -s
==63040== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

